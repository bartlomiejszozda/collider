#INSTALLATION:
follow ardupilot instruction (using docker)
https://ardupilot.org/dev/docs/ros.html
- Install ROS 2
- ROS 2 with SITL
- ROS 2 Interfaces
- ROS 2 with SITL in Gazebo

docker build -t ardupilot/ardupilot-dev-ros2 -f Dockerfile_dev-ros .
# remember to run docker with display, nvidia
docker run -it --env DISPLAY=$DISPLAY  --volume /tmp/.X11-unix:/tmp/.X11-unix --runtime=nvidia --gpus all --name ardupilot-dds3 ardupilot/ardupilot-dev-ros2

#copy aliases
docker cp .bash_aliases ardupilot-dds3:/root/.

# RUN
# run docker:
docker start ardupilot-dds3
sudo xhost +Local:* && docker container exec -it ardupilot-dds3 /bin/bash

# source ros in every terminal
cd ~/ardu_ws && source /opt/ros/humble/setup.bash && source install/setup.bash

# (1st terminal) start simulation
ros2 launch ardupilot_gz_bringup iris_runway.launch.py

# (2nd terminal) move black sphere up
gz topic -t "/world/map/wrench/persistent" -m gz.msgs.EntityWrench -p "entity: {name: 'sphere', type: MODEL}, wrench: {force: {x: 0, y:0, z:9.80}}" && gz topic -t "/world/map/wrench" -m gz.msgs.EntityWrench -p "entity: {name: 'sphere', type: MODEL}, wrench: {force: {x: 0, y:0, z:40000}}" && sleep 3 && gz topic -t "/world/map/wrench" -m gz.msgs.EntityWrench -p "entity: {name: 'sphere', type: MODEL}, wrench: {force: {x: 0, y:0, z:-40000}}"

colcon build --packages-select collider && ros2 run collider collider_bin

# (3rd terminal) run Pycharm:
cd cd /opt/pycharm-2024.3.5/bin/
sh pycharm.sh

ERRORS:
# When no gazebo image, probably old gazebo process still running
ps aux | grep gazebo

DESIGN PATTERNS:
not many, cause project is more Procedural than OOP heavy. No class exists in multiple instances
OpenCvTracker is Adapter
RcOverrider is a Facade
SteeringUnit, TrackerManager are observers (thanks to using ROS topics)
logging module is a singleton
